{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","breakLength","setBreakLength","sessionLength","setSessionLength","secondsLeft","setSecondsLeft","paused","setPaused","timerState","setTimerState","useEffect","intervalHandler","setInterval","document","getElementById","play","clearInterval","id","className","onClick","minutes","Math","floor","seconds","parseSeconds","role","aria-label","pause","currentTime","preload","src","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wQAyJeA,MAtJf,WAAgB,IAAD,EACyBC,mBAAS,GADlC,mBACNC,EADM,KACOC,EADP,OAE6BF,mBAAS,IAFtC,mBAENG,EAFM,KAESC,EAFT,OAGyBJ,mBAAS,MAHlC,mBAGNK,EAHM,KAGOC,EAHP,OAIeN,oBAAS,GAJxB,mBAINO,EAJM,KAIEC,EAJF,OAKuBR,mBAAS,WALhC,mBAKNS,EALM,KAKMC,EALN,KAkGb,OA3FAC,qBAAU,WAOR,IAAIC,EAAkBC,aANtB,WACON,GACHD,EAAeD,EAAc,KAIO,KAcxC,OAZoB,IAAhBA,IACFS,SAASC,eAAe,QAAQC,OAEb,UAAfP,GACFC,EAAc,WACdJ,EAA+B,GAAhBH,KAEfO,EAAc,SACdJ,EAA6B,GAAdL,KAIZ,WACLgB,cAAcL,MAEf,CAACL,EAAQF,EAAaI,EAAYR,EAAaE,IAoEhD,8BACE,wBAAIe,GAAG,cACL,iDAEF,yBAAKA,GAAG,WACN,6BAASA,GAAG,uBACV,wBAAIA,GAAG,eAAP,gBACA,yBAAKC,UAAU,YACb,4BAAQD,GAAG,kBAAkBE,QAAS,kBA1D9ClB,EAAeD,EAAc,QACzBA,GAAe,GACjBC,EAAe,MAwDT,UAGA,4BAAQgB,GAAG,gBAAgBjB,GAC3B,4BAAQiB,GAAG,kBAAkBE,QAAS,kBArE9ClB,EAAeD,EAAc,QACzBA,GAAe,IACjBC,EAAe,OAmET,YAKJ,6BAASgB,GAAG,yBACV,wBAAIA,GAAG,iBAAP,kBACA,yBAAKC,UAAU,YACb,4BAAQD,GAAG,oBAAoBE,QAAS,kBAtDhDhB,EAAiBD,EAAgB,GACjCG,EAAeD,EAAc,SACzBF,GAAiB,IACnBC,EAAiB,GACjBE,EAAe,QAkDT,UAGA,4BAAQY,GAAG,kBAAkBf,GAC7B,4BAAQe,GAAG,oBAAoBE,QAAS,kBAnEhDhB,EAAiBD,EAAgB,GACjCG,EAAeD,EAAc,SACzBF,GAAiB,KACnBC,EAAiB,IACjBE,EAAe,UA+DT,aAMN,6BAASY,GAAG,SACV,wBAAIA,GAAG,eAAeT,GACtB,0BAAMS,GAAG,aACP,8BA3DR,SAAsBb,GACpB,IAAIgB,EAAUC,KAAKC,MAAMlB,EAAc,IACnCmB,EAAUnB,EAAwB,GAAVgB,EAU5B,OARIA,EAAU,KACZA,EAAU,IAAMA,GAGdG,EAAU,KACZA,EAAU,IAAMA,GAGXH,EAAU,IAAMG,EA+CVC,CAAapB,KAEtB,yBAAKc,UAAU,YACb,4BAAQD,GAAG,aAAaE,QAASb,EAtGzC,WACEC,GAAU,IAGZ,WACEA,GAAU,KAkGF,0BAAMkB,KAAK,MAAMC,aAAW,cAA5B,WAIF,4BAAQT,GAAG,QAAQE,QAAS,kBAnDlCZ,GAAU,GACVE,EAAc,WACdR,EAAe,GACfE,EAAiB,IACjBE,EAAe,MACfQ,SAASC,eAAe,QAAQa,aAChCd,SAASC,eAAe,QAAQc,YAAc,KA6CxC,WAKJ,2BAAOX,GAAG,OAAOY,QAAQ,OAAOC,IAAI,4BCxItBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxB,SAASC,eAAe,SD6H3C,kBAAmBwB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e7df0e69.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [breakLength, setBreakLength] = useState(5);\n  const [sessionLength, setSessionLength] = useState(25);\n  const [secondsLeft, setSecondsLeft] = useState(1500); // 25min\n  const [paused, setPaused] = useState(true);\n  const [timerState, setTimerState] = useState(\"Session\");\n\n  useEffect(() => {\n    function tick() {\n      if (!paused) {\n        setSecondsLeft(secondsLeft - 1);\n      }\n    }\n\n    let intervalHandler = setInterval(tick, 1000);\n\n    if (secondsLeft === 0) {\n      document.getElementById(\"beep\").play();\n\n      if (timerState === \"Break\") {\n        setTimerState(\"Session\");\n        setSecondsLeft(sessionLength * 60);\n      } else {\n        setTimerState(\"Break\");\n        setSecondsLeft(breakLength * 60);\n      }\n    }\n\n    return () => {\n      clearInterval(intervalHandler);\n    };\n  }, [paused, secondsLeft, timerState, breakLength, sessionLength]);\n\n  function startTimer() {\n    setPaused(false);\n  }\n\n  function pauseTimer() {\n    setPaused(true);\n  }\n\n  function breakLengthUp() {\n    setBreakLength(breakLength + 1);\n    if (breakLength >= 60) {\n      setBreakLength(60);\n    }\n  }\n\n  function breakLengthDown() {\n    setBreakLength(breakLength - 1);\n    if (breakLength <= 1) {\n      setBreakLength(1);\n    }\n  }\n\n  function sessionLengthUp() {\n    setSessionLength(sessionLength + 1);\n    setSecondsLeft(secondsLeft + 60);\n    if (sessionLength >= 60) {\n      setSessionLength(60);\n      setSecondsLeft(3600);\n    }\n  }\n\n  function sessionLengthDown() {\n    setSessionLength(sessionLength - 1);\n    setSecondsLeft(secondsLeft - 60);\n    if (sessionLength <= 1) {\n      setSessionLength(1);\n      setSecondsLeft(60);\n    }\n  }\n\n  function parseSeconds(secondsLeft) {\n    let minutes = Math.floor(secondsLeft / 60);\n    let seconds = secondsLeft - minutes * 60;\n\n    if (minutes < 10) {\n      minutes = \"0\" + minutes;\n    }\n\n    if (seconds < 10) {\n      seconds = \"0\" + seconds;\n    }\n\n    return minutes + \":\" + seconds;\n  }\n\n  function resetTimer() {\n    setPaused(true);\n    setTimerState(\"Session\");\n    setBreakLength(5);\n    setSessionLength(25);\n    setSecondsLeft(1500);\n    document.getElementById(\"beep\").pause();\n    document.getElementById(\"beep\").currentTime = 0;\n  }\n\n  return (\n    <main>\n      <h1 id=\"page-title\">\n        <code>Pomodoro Clock</code>\n      </h1>\n      <div id=\"lengths\">\n        <section id=\"break-configuration\">\n          <h1 id=\"break-label\">Break length</h1>\n          <div className=\"commands\">\n            <button id=\"break-decrement\" onClick={() => breakLengthDown()}>\n              ⬇\n            </button>\n            <output id=\"break-length\">{breakLength}</output>\n            <button id=\"break-increment\" onClick={() => breakLengthUp()}>\n              ⬆\n            </button>\n          </div>\n        </section>\n        <section id=\"session-configuration\">\n          <h1 id=\"session-label\">Session length</h1>\n          <div className=\"commands\">\n            <button id=\"session-decrement\" onClick={() => sessionLengthDown()}>\n              ⬇\n            </button>\n            <output id=\"session-length\">{sessionLength}</output>\n            <button id=\"session-increment\" onClick={() => sessionLengthUp()}>\n              ⬆\n            </button>\n          </div>\n        </section>\n      </div>\n      <section id=\"timer\">\n        <h1 id=\"timer-label\">{timerState}</h1>\n        <span id=\"time-left\">\n          <code>{parseSeconds(secondsLeft)}</code>\n        </span>\n        <div className=\"commands\">\n          <button id=\"start_stop\" onClick={paused ? startTimer : pauseTimer}>\n            <span role=\"img\" aria-label=\"start-stop\">\n              ⏯\n            </span>\n          </button>\n          <button id=\"reset\" onClick={() => resetTimer()}>\n            Reset\n          </button>\n        </div>\n      </section>\n      <audio id=\"beep\" preload=\"auto\" src=\"https://goo.gl/65cBl1\" />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}